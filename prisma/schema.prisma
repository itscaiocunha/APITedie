generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "sqlserver"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model carrinho {
  id          Int       @id(map: "PK__tmp_ms_x__3213E83F8596E432") @default(autoincrement())
  usuario_id  Int?
  produto_id  Int?
  nome        String?   @db.NVarChar(Max)
  quantidade  Int       @default(1, map: "DF__tmp_ms_xx__quant__13F1F5EB")
  preco       Float?
  imagem      String?   @db.NVarChar(Max)
  data_adicao DateTime? @default(now(), map: "DF__tmp_ms_xx__data___14E61A24") @db.DateTime
  usuarios    usuarios? @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__carrinho__usuari__3493CFA7")
}

model categorias {
  id        Int     @id(map: "PK__categori__3213E83FB579C768") @default(autoincrement())
  nome      String  @db.NVarChar(100)
  descricao String? @db.NVarChar(Max)
}

model cupons {
  id          Int       @id(map: "PK_cupons") @default(autoincrement())
  codigo      String?   @db.NVarChar(50)
  desconto    String?   @db.NVarChar(50)
  validade    DateTime? @db.DateTime
  data_adicao DateTime? @db.DateTime
}

model envios {
  id           Int       @id(map: "PK__envios__3213E83F0944207A") @default(autoincrement())
  pedido_id    Int?
  rastreio     String?   @unique(map: "UQ__envios__96D575193117401C") @db.NVarChar(50)
  status       String?   @default("preparando", map: "DF__envios__status__498EEC8D") @db.VarChar(15)
  data_envio   DateTime? @db.DateTime
  data_entrega DateTime? @db.DateTime
  pedidos      pedidos?  @relation(fields: [pedido_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__envios__pedido_i__4A8310C6")
}

model itens_pedido {
  id         Int       @id(map: "PK__itens_pe__3213E83F6FE3D8B7") @default(autoincrement())
  pedido_id  Int?
  produto_id Int?
  quantidade Int
  preco_unit Decimal   @db.Decimal(10, 2)
  pedidos    pedidos?  @relation(fields: [pedido_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__itens_ped__pedid__3E1D39E1")
  produtos   produtos? @relation(fields: [produto_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK_itens_pedido_produtos")
}

model pagamentos {
  id             Int       @id(map: "PK__pagament__3213E83F4C4BBFD4") @default(autoincrement())
  pedido_id      Int?
  metodo         String    @db.VarChar(10)
  status         String?   @default("pendente", map: "DF__pagamento__statu__43D61337") @db.VarChar(10)
  data_pagamento DateTime? @db.DateTime
  pedidos        pedidos?  @relation(fields: [pedido_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__pagamento__pedid__44CA3770")
}

model pedidos {
  id           Int            @id(map: "PK__tmp_ms_x__3213E83FD1FB4650") @default(autoincrement())
  usuario_id   Int?
  total        Decimal        @db.Decimal(10, 2)
  endereco_id  Int?
  status       String?        @default("pendente", map: "DF__tmp_ms_xx__statu__2334397B") @db.VarChar(10)
  data_pedido  DateTime?      @default(now(), map: "DF__tmp_ms_xx__data___24285DB4") @db.DateTime
  envios       envios[]
  itens_pedido itens_pedido[]
  pagamentos   pagamentos[]
  usuarios     usuarios?      @relation(fields: [usuario_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "FK__pedidos__usuario__3B40CD36")
}

model produtos {
  id           Int            @id(map: "PK_produtos")
  nome         String?        @db.NVarChar(100)
  descricao    String?        @db.NVarChar(Max)
  preco        Float?
  Estoque      Int?
  categoria_id Int?
  imagem       String?        @db.NVarChar(100)
  ean          String?        @db.NVarChar(Max)
  IdEmpresa    Int?
  refrigerado  Int?
  itens_pedido itens_pedido[]
}

model usuarios {
  id           Int        @id(map: "PK__tmp_ms_x__3213E83F1EE4C6CF") @default(autoincrement())
  nome         String     @db.NVarChar(100)
  cpf          String?    @db.NVarChar(15)
  email        String     @unique(map: "UQ__tmp_ms_x__AB6E6164EFC01760") @db.NVarChar(100)
  senha        String     @db.NVarChar(255)
  telefone     String?    @db.NVarChar(20)
  endereco_id  Int?
  tipo_usuario String?    @default("cliente", map: "DF__tmp_ms_xx__tipo___1B9317B3") @db.VarChar(10)
  data_criacao DateTime?  @default(now(), map: "DF__tmp_ms_xx__data___1C873BEC") @db.DateTime
  carrinho     carrinho[]
  pedidos      pedidos[]
  enderecos    enderecos? @relation(fields: [endereco_id], references: [Id], onDelete: NoAction, onUpdate: NoAction, map: "FK_usuarios_enderecos")

  @@index([endereco_id], map: "IX_usuarios_endereco_id")
}

model PasswordResetToken {
  id        String   @id(map: "PK__Password__3213E83FC4D387F8") @default(dbgenerated("newid()"), map: "DF__PasswordRese__id__2CBDA3B5") @db.UniqueIdentifier
  token     String   @unique(map: "UQ__Password__CA90DA7A84B7842A") @db.NVarChar(255)
  email     String   @db.NVarChar(255)
  expiresAt DateTime
  createdAt DateTime @default(dbgenerated("sysdatetime()"), map: "DF__PasswordR__creat__2DB1C7EE")

  @@index([email], map: "idx_email")
}

model enderecos {
  Id          Int        @id(map: "PK__endereco__3214EC07AE7146A0") @default(autoincrement())
  Logradouro  String     @db.NVarChar(255)
  Numero      String     @db.NVarChar(10)
  Complemento String?    @db.NVarChar(255)
  Bairro      String     @db.NVarChar(100)
  Cidade      String     @db.NVarChar(100)
  Estado      String     @db.Char(2)
  CEP         String     @db.Char(9)
  Pais        String     @default("Brasil", map: "DF__enderecos__Pais__625A9A57") @db.NVarChar(50)
  usuarios    usuarios[]
}

model empresa {
  Id            Int     @id(map: "PK_empresa") @default(autoincrement())
  razao_social  String? @db.NVarChar(100)
  cnpj          String? @db.NVarChar(20)
  nome_fantasia String? @db.NVarChar(50)
}
